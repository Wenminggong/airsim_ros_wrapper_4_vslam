%YAML:1.0

#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 
imu: 1         
num_of_cam: 2

imu_topic: "/airsim_node/Drone_1/imu/imu_1"
# imu_topic: "/dji_sdk_1/dji_sdk/imu"
image0_topic: "/airsim_node/Drone_1/leftcamera_1/Scene"
image1_topic: "/airsim_node/Drone_1/rightcamera_1/Scene"
output_path: "/mnt/d/uavs/vslam/results/chatgpt_vslam/vins"

cam0_calib: "vins_camera_left.yaml"
cam1_calib: "vins_camera_right.yaml"
image_width: 640
image_height: 480
   

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0     # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.



body_T_cam0: !!opencv-matrix
  rows: 4
  cols: 4
  dt: d
  # data: [0, 0, 1, 0.35,
  #       -1, 0, 0, 0.05,
  #       0, -1, 0, 0.1, 
  #       0., 0., 0., 1 ]

  # pitch 0, roll 0, yaw 0
  # data: [0, 0, 1, 0.35,
  #       1, 0, 0, -0.05,
  #       0, 1, 0, -0.1, 
  #       0., 0., 0., 1 ]

  #[0, -sin(), cos(),
  # 1, 0, 0,
  # 0, cos(), sin()]

  # pitch -30, roll 0, yaw 0
  # data: [0, -0.5, 0.8660254037844386, 0.35,
  #       1, 0, 0, -0.05,
  #       0, 0.8660254037844386, 0.5, -0.1, 
  #       0., 0., 0., 1 ]
  # pitch -20, roll 0, yaw 0
  data: [0, -0.3420201433256687, 0.9396926207859084, 0.35,
        1, 0, 0, -0.05,
        0, 0.9396926207859084, 0.3420201433256687, -0.1, 
        0., 0., 0., 1 ]
  # pitch -10, roll 0, yaw 0
  # data: [0, -0.17364817766693033, 0.984807753012208, 0.35,
  #       1, 0, 0, -0.05,
  #       0, 0.984807753012208, 0.17364817766693033, -0.1, 
  #       0., 0., 0., 1 ]
  

body_T_cam1: !!opencv-matrix
  rows: 4
  cols: 4
  dt: d
  # data: [0, 0, 1, 0.35,
  #       -1, 0, 0, -0.05,
  #       0, -1, 0, 0.1, 
  #       0., 0., 0., 1 ]

  # pitch 0, roll 0, yaw 0
  # data: [0, 0, 1, 0.35,
  #       1, 0, 0, 0.05,
  #       0, 1, 0, -0.1, 
  #       0., 0., 0., 1 ]
  # pitch -30, roll 0, yaw 0
  # data: [0, -0.5, 0.8660254037844386, 0.35,
  #       1, 0, 0, 0.05,
  #       0, 0.8660254037844386, 0.5, -0.1, 
  #       0., 0., 0., 1 ]
  # pitch -20, roll 0, yaw 0
  data: [0, -0.3420201433256687, 0.9396926207859084, 0.35,
        1, 0, 0, 0.05,
        0, 0.9396926207859084, 0.3420201433256687, -0.1, 
        0., 0., 0., 1 ]
  # pitch -10, roll 0, yaw 0
  # data: [0, -0.17364817766693033, 0.984807753012208, 0.35,
  #       1, 0, 0, 0.05,
  #       0, 0.984807753012208, 0.17364817766693033, -0.1, 
  #       0., 0., 0., 1 ]
  


#Multiple thread support
multiple_thread: 1
#Gpu accleration support
use_gpu: 0
use_gpu_acc_flow: 0

#feature traker paprameters
max_cnt: 200            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 3.3285e-2          # accelerometer measurement noise standard deviation. #0.2  0.014885
gyr_n: 1.2341e-3        # gyroscope measurement noise standard deviation.     # 1e-3  0.00055192
acc_w: 8.826e-7        # accelerometer bias random work noise standard deviation.  #1e-4  0.0000019736
gyr_w: 7.0523e-8      # gyroscope bias random work noise standard deviation.     #1.0e-5  0.00000015769
g_norm: 9.81007      # gravity magnitude 9.805  9.81007

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
# td: -0.0736        #-0.0736 when use DJI IMU                       # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)#
td: 0.0
#loop closure parameters
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/root/output/pose_graph/" # save and load path
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0 

# #rectify
# cam0_rectify: !!opencv-matrix
#   rows: 4
#   cols: 4
#   dt: d
#   data: [0, 0, 1, 0.35,
#         -1, 0, 0, 0.05,
#         0, -1, 0, 0.1, 
#         0., 0., 0., 1 ]

# cam1_rectify: !!opencv-matrix
#   rows: 4
#   cols: 4
#   dt: d
#   data: [0, 0, 1, 0.35,
#         -1, 0, 0, -0.05,
#         0, -1, 0, 0.1, 
#         0., 0., 0., 1 ]
